/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module lcdmodule2_9 (
    input clk,
    input rst,
    input [0:0] new_screen,
    input [5:0] next,
    output reg lcd_rs,
    output reg lcd_rw,
    output reg lcd_e,
    output reg [7:0] lcd_databus,
    output reg [2:0] ini
  );
  
  
  
  localparam ROM_LENGTH = 7'h50;
  
  localparam PWR_UP_state = 4'd0;
  localparam LINE_END_CHECK_state = 4'd1;
  localparam SETUP_state = 4'd2;
  localparam PWR_UP_DELAY_state = 4'd3;
  localparam OFF_PWR_UP_DELAY_state = 4'd4;
  localparam WRITE_DATA_state = 4'd5;
  localparam DATA_SETUP_DELAY_state = 4'd6;
  localparam E_PULSE_HI_state = 4'd7;
  localparam E_HI_TIME_state = 4'd8;
  localparam E_PULSE_LO_state = 4'd9;
  localparam PROC_COMP_DELAY_state = 4'd10;
  localparam LOAD_NEXT_DATA_state = 4'd11;
  
  reg [3:0] M_state_d, M_state_q = PWR_UP_state;
  localparam IDLE_command = 3'd0;
  localparam FUNCTION_SET_command = 3'd1;
  localparam DISPLAY_ON_command = 3'd2;
  localparam CLEAR_command = 3'd3;
  localparam SET_ENTRY_MODE_command = 3'd4;
  localparam WRITE_CHAR_command = 3'd5;
  
  reg [2:0] M_command_d, M_command_q = IDLE_command;
  reg [29:0] M_timer_d, M_timer_q = 1'h0;
  reg [7:0] M_databus_d, M_databus_q = 1'h0;
  reg [0:0] M_rs_d, M_rs_q = 1'h0;
  reg [0:0] M_e_d, M_e_q = 1'h0;
  reg [2:0] M_init_d, M_init_q = 1'h0;
  reg [0:0] M_new_screenn_d, M_new_screenn_q = 1'h0;
  reg [0:0] M_cleared_d, M_cleared_q = 1'h0;
  reg [6:0] M_rom_char_pos_d, M_rom_char_pos_q = 1'h0;
  reg [5:0] M_rom_add_d, M_rom_add_q = 1'h0;
  
  wire [8-1:0] M_rom_letter;
  reg [6-1:0] M_rom_selector;
  reg [7-1:0] M_rom_address;
  text_rom_32 rom (
    .selector(M_rom_selector),
    .address(M_rom_address),
    .letter(M_rom_letter)
  );
  
  reg [7:0] char;
  
  always @* begin
    M_command_d = M_command_q;
    M_state_d = M_state_q;
    M_cleared_d = M_cleared_q;
    M_rom_char_pos_d = M_rom_char_pos_q;
    M_rom_add_d = M_rom_add_q;
    M_new_screenn_d = M_new_screenn_q;
    M_e_d = M_e_q;
    M_timer_d = M_timer_q;
    M_init_d = M_init_q;
    M_rs_d = M_rs_q;
    M_databus_d = M_databus_q;
    
    char = M_rom_letter;
    M_rom_selector = M_rom_add_q;
    M_rom_address = M_rom_char_pos_q - 1'h1;
    lcd_rw = 1'h0;
    lcd_rs = M_rs_q;
    lcd_e = M_e_q;
    lcd_databus = M_databus_q;
    ini = M_init_q;
    M_e_d = M_e_q;
    M_new_screenn_d = M_new_screenn_q;
    M_cleared_d = M_cleared_q;
    M_rom_char_pos_d = M_rom_char_pos_q;
    M_rs_d = M_rs_q;
    M_databus_d = M_databus_q;
    M_timer_d = M_timer_q;
    M_state_d = M_state_q;
    M_init_d = M_init_q;
    M_command_d = M_command_q;
    M_rom_add_d = M_rom_add_q;
    M_rom_add_d = next;
    if (new_screen) begin
      M_new_screenn_d = 1'h1;
    end
    
    case (M_state_q)
      PWR_UP_state: begin
        M_init_d = 1'h0;
        M_timer_d = 1'h0;
        M_state_d = PWR_UP_DELAY_state;
      end
      PWR_UP_DELAY_state: begin
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q == 22'h225510) begin
          M_state_d = OFF_PWR_UP_DELAY_state;
        end
      end
      OFF_PWR_UP_DELAY_state: begin
        M_timer_d = 1'h0;
        M_state_d = SETUP_state;
      end
      SETUP_state: begin
        M_timer_d = M_timer_q + 1'h1;
        if (M_init_q < 3'h4 && M_timer_q > 18'h320c8) begin
          M_command_d = FUNCTION_SET_command;
        end else begin
          if (M_init_q == 3'h4) begin
            M_command_d = DISPLAY_ON_command;
          end else begin
            if (M_init_q == 3'h5) begin
              M_command_d = SET_ENTRY_MODE_command;
            end else begin
              if (M_new_screenn_q && M_init_q == 3'h6) begin
                M_command_d = CLEAR_command;
              end else begin
                if (M_init_q == 3'h6 && M_cleared_q == 1'h1) begin
                  M_command_d = WRITE_CHAR_command;
                end else begin
                  M_command_d = IDLE_command;
                end
              end
            end
          end
        end
        
        case (M_command_q)
          IDLE_command: begin
            M_timer_d = M_timer_q + 1'h1;
          end
          FUNCTION_SET_command: begin
            M_timer_d = 1'h0;
            M_rs_d = 1'h0;
            M_databus_d = 8'h38;
            M_init_d = M_init_q + 1'h1;
            M_state_d = WRITE_DATA_state;
          end
          DISPLAY_ON_command: begin
            M_rs_d = 1'h0;
            M_timer_d = 1'h0;
            M_databus_d = 8'h0c;
            M_init_d = M_init_q + 1'h1;
            M_state_d = WRITE_DATA_state;
          end
          WRITE_CHAR_command: begin
            M_rs_d = 1'h1;
            M_timer_d = 1'h0;
            M_databus_d = char;
            M_state_d = LINE_END_CHECK_state;
          end
          SET_ENTRY_MODE_command: begin
            M_rs_d = 1'h0;
            M_timer_d = 1'h0;
            M_databus_d = 8'h06;
            M_init_d = M_init_q + 1'h1;
            if (M_init_q == 3'h6) begin
              M_init_d = M_init_q;
            end
            M_state_d = WRITE_DATA_state;
          end
          CLEAR_command: begin
            M_rs_d = 1'h0;
            M_timer_d = 1'h0;
            M_rom_char_pos_d = 1'h0;
            M_new_screenn_d = 1'h0;
            M_cleared_d = 1'h1;
            M_databus_d = 8'h01;
            M_state_d = WRITE_DATA_state;
          end
        endcase
      end
      LINE_END_CHECK_state: begin
        if (M_rom_char_pos_q <= 7'h50) begin
          M_state_d = WRITE_DATA_state;
        end
        if (M_rom_char_pos_q > 7'h50 && M_new_screenn_q == 1'h1) begin
          M_cleared_d = 1'h0;
          M_state_d = SETUP_state;
        end
      end
      WRITE_DATA_state: begin
        M_timer_d = 1'h0;
        M_state_d = DATA_SETUP_DELAY_state;
      end
      DATA_SETUP_DELAY_state: begin
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q > 5'h14) begin
          M_timer_d = 1'h0;
          M_state_d = E_PULSE_HI_state;
        end
      end
      E_PULSE_HI_state: begin
        M_e_d = 1'h1;
        M_timer_d = 1'h0;
        M_state_d = E_HI_TIME_state;
      end
      E_HI_TIME_state: begin
        M_e_d = M_e_q;
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q == 4'hd) begin
          M_state_d = E_PULSE_LO_state;
        end
      end
      E_PULSE_LO_state: begin
        M_e_d = 1'h0;
        M_timer_d = 1'h0;
        M_state_d = PROC_COMP_DELAY_state;
      end
      PROC_COMP_DELAY_state: begin
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q == 17'h14050) begin
          if (M_rom_char_pos_q <= 7'h50) begin
            M_rom_char_pos_d = M_rom_char_pos_q + 1'h1;
          end
          M_state_d = LOAD_NEXT_DATA_state;
        end
      end
      LOAD_NEXT_DATA_state: begin
        M_timer_d = 1'h0;
        M_state_d = SETUP_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_timer_q <= M_timer_d;
    M_databus_q <= M_databus_d;
    M_rs_q <= M_rs_d;
    M_e_q <= M_e_d;
    M_init_q <= M_init_d;
    M_new_screenn_q <= M_new_screenn_d;
    M_cleared_q <= M_cleared_d;
    M_rom_char_pos_q <= M_rom_char_pos_d;
    M_rom_add_q <= M_rom_add_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
      M_command_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
      M_command_q <= M_command_d;
    end
  end
  
endmodule
