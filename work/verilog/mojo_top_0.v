/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input button0,
    input button1,
    output reg clr,
    output reg g,
    output reg d,
    output reg [2:0] latchout1,
    output reg [2:0] latchout2,
    output reg [2:0] latchout3,
    output reg [2:0] latchout4,
    output reg [2:0] latchout5,
    output reg lcd_rs,
    output reg lcd_rw,
    output reg lcd_e,
    output reg [7:0] lcd_databus
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_cpu_lcdWrite;
  wire [1-1:0] M_cpu_attributeWrite;
  wire [8-1:0] M_cpu_led0;
  wire [8-1:0] M_cpu_led1;
  wire [8-1:0] M_cpu_led2;
  wire [6-1:0] M_cpu_display_driver;
  wire [5-1:0] M_cpu_attr1;
  wire [5-1:0] M_cpu_attr2;
  wire [5-1:0] M_cpu_attr3;
  wire [5-1:0] M_cpu_attr4;
  wire [8-1:0] M_cpu_status;
  reg [1-1:0] M_cpu_button0;
  reg [1-1:0] M_cpu_button1;
  cpu_2 cpu (
    .clk(clk),
    .rst(rst),
    .button0(M_cpu_button0),
    .button1(M_cpu_button1),
    .lcdWrite(M_cpu_lcdWrite),
    .attributeWrite(M_cpu_attributeWrite),
    .led0(M_cpu_led0),
    .led1(M_cpu_led1),
    .led2(M_cpu_led2),
    .display_driver(M_cpu_display_driver),
    .attr1(M_cpu_attr1),
    .attr2(M_cpu_attr2),
    .attr3(M_cpu_attr3),
    .attr4(M_cpu_attr4),
    .status(M_cpu_status)
  );
  wire [3-1:0] M_controller1_outtolatch;
  reg [5-1:0] M_controller1_in;
  latch_controller_3 controller1 (
    .clk(clk),
    .rst(rst),
    .in(M_controller1_in),
    .outtolatch(M_controller1_outtolatch)
  );
  wire [3-1:0] M_controller2_outtolatch;
  reg [5-1:0] M_controller2_in;
  latch_controller_3 controller2 (
    .clk(clk),
    .rst(rst),
    .in(M_controller2_in),
    .outtolatch(M_controller2_outtolatch)
  );
  wire [3-1:0] M_controller3_outtolatch;
  reg [5-1:0] M_controller3_in;
  latch_controller_3 controller3 (
    .clk(clk),
    .rst(rst),
    .in(M_controller3_in),
    .outtolatch(M_controller3_outtolatch)
  );
  wire [3-1:0] M_controller4_outtolatch;
  reg [5-1:0] M_controller4_in;
  latch_controller_3 controller4 (
    .clk(clk),
    .rst(rst),
    .in(M_controller4_in),
    .outtolatch(M_controller4_outtolatch)
  );
  wire [3-1:0] M_controller5_outtolatch;
  reg [5-1:0] M_controller5_in;
  latch_controller_3 controller5 (
    .clk(clk),
    .rst(rst),
    .in(M_controller5_in),
    .outtolatch(M_controller5_outtolatch)
  );
  
  wire [5-1:0] M_statusdecoder_out;
  reg [8-1:0] M_statusdecoder_in;
  statusdecoder_8 statusdecoder (
    .in(M_statusdecoder_in),
    .out(M_statusdecoder_out)
  );
  
  integer enable;
  
  wire [1-1:0] M_lcd_lcd_rs;
  wire [1-1:0] M_lcd_lcd_rw;
  wire [1-1:0] M_lcd_lcd_e;
  wire [8-1:0] M_lcd_lcd_databus;
  wire [3-1:0] M_lcd_ini;
  reg [1-1:0] M_lcd_clk;
  reg [1-1:0] M_lcd_rst;
  reg [1-1:0] M_lcd_new_screen;
  reg [6-1:0] M_lcd_next;
  lcdmodule2_9 lcd (
    .clk(M_lcd_clk),
    .rst(M_lcd_rst),
    .new_screen(M_lcd_new_screen),
    .next(M_lcd_next),
    .lcd_rs(M_lcd_lcd_rs),
    .lcd_rw(M_lcd_lcd_rw),
    .lcd_e(M_lcd_lcd_e),
    .lcd_databus(M_lcd_lcd_databus),
    .ini(M_lcd_ini)
  );
  
  always @* begin
    M_statusdecoder_in = M_cpu_status;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_cpu_button0 = button0;
    M_cpu_button1 = button1;
    io_led[8+7-:8] = M_statusdecoder_out;
    io_led[0+0+4-:5] = M_cpu_attr4;
    clr = 1'h1;
    g = 1'h0;
    d = 1'h1;
    M_controller1_in = 5'h03;
    M_controller2_in = 5'h03;
    M_controller3_in = 5'h03;
    M_controller4_in = 5'h03;
    M_controller5_in = 5'h01;
    latchout1 = M_controller1_outtolatch;
    latchout2 = M_controller2_outtolatch;
    latchout3 = M_controller3_outtolatch;
    latchout4 = M_controller4_outtolatch;
    latchout5 = M_controller5_outtolatch;
    enable = 1'h0;
    if (enable == 1'h1) begin
      M_controller1_in = M_cpu_attr1;
      M_controller2_in = M_cpu_attr2;
      M_controller3_in = M_cpu_attr3;
      M_controller4_in = M_cpu_attr4;
      M_controller5_in = M_statusdecoder_out;
      latchout1 = M_controller1_outtolatch;
      latchout2 = M_controller2_outtolatch;
      latchout3 = M_controller3_outtolatch;
      latchout4 = M_controller4_outtolatch;
      latchout5 = M_controller5_outtolatch;
    end
    M_lcd_clk = clk;
    M_lcd_rst = rst;
    lcd_rs = M_lcd_lcd_rs;
    lcd_rw = M_lcd_lcd_rw;
    lcd_e = M_lcd_lcd_e;
    lcd_databus = M_lcd_lcd_databus;
    M_lcd_new_screen = M_cpu_lcdWrite;
    M_lcd_next = M_cpu_display_driver;
  end
endmodule
