module mojo_top ( //LAST EDIT 7/12/2016 9:27PM
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input button0,
    input button1,
    
    
    output clr,
    output g,
    output d,
    output latchout1[3],
    output latchout2[3],
    output latchout3[3],
    output latchout4[3],
    output latchout5[3],
    
    
    output lcd_rs,
    output lcd_rw,
    output lcd_e,
    output lcd_databus[8]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {

    reset_conditioner reset_cond;
    .rst(rst) {
      cpu cpu;        // our snazzy cpu
      latch_controller controller1;
      latch_controller controller2;
      latch_controller controller3;
      latch_controller controller4;
      latch_controller controller5;
      
    }
  }
  statusdecoder statusdecoder;
  var enable;
  
  lcdmodule2 lcd;
  
  always {
    statusdecoder.in = cpu.status;
    
    io_led = 3x{{8d0}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    cpu.button0 = button0; //red button
    cpu.button1 = button1; //green button
        
    //io_led[1][5:0]=cpu.display_driver;
    //io_led[0]= cpu.led0;
    io_led[1]= statusdecoder.out;
    
    
    //attribute testing
    io_led[0][4:0] = cpu.attr4;
    //io_led[1][4:0]=  cpu.attr2;
    //io_led[2][4:0]=  cpu.attr3;
    
    //statusdecoder.in = cpu.status;    
    
    //////val part///////
    clr = 1;
    g = 0;
    d = 1;
    

    
    latchout1 = controller1.outtolatch;
    latchout2 = controller2.outtolatch;
    latchout3 = controller3.outtolatch;
    latchout4 = controller4.outtolatch;
    latchout5 = controller5.outtolatch;
    enable = 0;
    
 
    
      
    controller1.in = cpu.attr1;
    controller2.in = cpu.attr2;
    controller3.in = cpu.attr3;
    controller4.in = cpu.attr4;
    controller5.in = statusdecoder.out;
      
  
    
    lcd.clk = clk;//slow_clock.q[25];
    lcd.rst = rst;
    lcd_rs = lcd.lcd_rs;
    lcd_rw = lcd.lcd_rw;
    lcd_e = lcd.lcd_e;
    lcd_databus = lcd.lcd_databus;
    
    lcd.new_screen = cpu.lcdWrite;
    lcd.next = cpu.display_driver;
      
  }
    
}



